/**------------------------- **\
            Functions
\**------------------------- **/

/*Retrieve color Sass maps*/
@function color($key: 'blue') {
  @return map-get($colors, $key);
}

@function theme-color($key: 'primary') {
  @return map-get($theme-colors, $key);
}

@function gray($key: '100') {
  @return map-get($grays, $key);
}

/*Request a theme color level*/
@function theme-color-level($color-name: 'primary', $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, #000, #fff);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

/*Function to access UI Neutral Colors*/
$UIN-colors-list: #f1f4f7 #e0e0e0 #b3babc #757588 #2d2d39;
$text-color: #ffffff;
@each $current-color in $UIN-colors-list {
  $i: index($UIN-colors-list, $current-color);
  .neutral-#{$i} {
    background-color: $current-color;
    color: $text-color;
  }
}
/*
  .mr-4 which gives margin-right 10 pixels.
  .mt-4 gives MARGIN to the RIGHT 15 pixels.
  .ml-4 gives MARGIN to the TOP 15 pixels and so on.
  .pt-4 gives PADDING to the BOTTOM of 5 pixels
  .pl-4 gives PADDING to the LEFT of 40 pixels
  */

$spaceamounts: (4, 8, 12, 16, 24, 32, 40, 48, 56, 64, 72, 128); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right);

@each $space in $spaceamounts {
  @each $side in $sides {
    .m#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px;
    }
    .p#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px;
    }
  }
}

@each $space in $spaceamounts {
  .m-#{$space} {
    margin: #{$space}px;
  }
  .p-#{$space} {
    padding: #{$space}px;
  }
}
